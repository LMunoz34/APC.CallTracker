@page "/memo"
@inject MemoService MemoService
@using APC.CallTracker.Config;
@using APC.CallTracker.Models
@using APC.CallTracker.Services
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using DevExpress.Blazor

@inject IJSRuntime JSRuntime
@* @inject IHttpClientFactory _clientFactory *@
<h3>Reason Code Templates</h3>

@if (templates == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3>Add New Memo</h3>

    <EditForm Model="newMemo" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <div style="display: flex;">
            <div class="form-group mx-1" style="flex: 1;">
                <label for="CodeID">Code ID:</label>
                <InputText id="CodeID" class="form-control" @bind-Value="newMemo.CodeID"></InputText>
            </div>

            <div class="form-group mx-1" style="flex: 1;">
                <label for="Name">Name:</label>
                <InputText id="Name" class="form-control" @bind-Value="newMemo.Name"></InputText>
            </div>

            <div class="form-group mx-1" style="flex: 1;">
                <label for="Summary">Summary:</label>
                <InputText id="Summary" class="form-control" @bind-Value="newMemo.Summary"></InputText>
            </div>
		</div>

        <div style="display: flex;">
            <div class="form-group mx-1" style="flex: 1;">
                <label for="Description">Description:</label>
                <InputText id="Description" class="form-control" @bind-Value="newMemo.Description"></InputText>
            </div>

            <div class="form-group mx-1" style="flex: 1;">
                <label for="Caption">Caption:</label>
                <InputText id="Caption" class="form-control" @bind-Value="newMemo.Caption"></InputText>
            </div>

            <div class="form-group mx-1" style="flex: 1;">
                <label for="LinkTypeID">LinkTypeID:</label>
                <InputText id="LinkTypeID" class="form-control" @bind-Value="newMemo.LinkTypeID"></InputText>
            </div>
        </div>

        <div style="display: flex;">
			<div class="form-group" style="flex: 1;margin:10px;">
                <label for="Needs2067">Needs2067:</label>
                <InputCheckbox id="Needs2067" @bind-Value="newMemo.Needs2067"></InputCheckbox>
            </div>

            <div class="form-group" style="flex: 1;margin:10px;">
                <label for="ForBillingTeam">ForBillingTeam:</label>
                <InputCheckbox id="ForBillingTeam" @bind-Value="newMemo.ForBillingTeam"></InputCheckbox>
            </div>

            <div class="form-group mx-1" style="flex: 1;">
                <label for="EffectiveDate">EffectiveDate:</label>
                <InputDate id="EffectiveDate" class="form-control" @bind-Value="newMemo.EffectiveDate"></InputDate>
            </div>

            <div class="form-group mx-1" style="flex: 1;">
                <label for="ExpirationDate">ExpirationDate:</label>
                <InputDate id="ExpirationDate" class="form-control" @bind-Value="newMemo.ExpirationDate"></InputDate>
            </div>
        </div>

        <div class="form-group">
            <label for="Template">Template:</label>
            <InputTextArea id="Template" class="form-control" @bind-Value="newMemo.Template" rows="10"></InputTextArea>
        </div>

        <button type="submit" class="btn btn-primary my-5">Create/Update Memo</button>
        <button type="button" class="btn btn-secondary" @onclick="()=> ClearData()">Clear</button>
@*         <br /><br />
        <InputText @bind-Value="searchTerm" />
        <DevExpress.Blazor.DxButton Text="Search" Click="@Search"></DevExpress.Blazor.DxButton> *@
    </EditForm>
    <DxDataGrid Data="@templates"
                ShowPager="true"
                PageSize="100"
                ShowFilterRow="true">
        <DxDataGridColumn Field="@nameof(NewReasonCodeTemplate.CodeID)" Caption="CodeID"></DxDataGridColumn>
        <DxDataGridColumn Field="@nameof(NewReasonCodeTemplate.Name)" Caption="Name"></DxDataGridColumn>
        <DxDataGridColumn Field="@nameof(NewReasonCodeTemplate.Summary)" Caption="Summary"></DxDataGridColumn>
        <DxDataGridColumn Caption="Actions">
            <DisplayTemplate>
                @{
                    var template = (NewReasonCodeTemplate)context;
                }
                <button @onclick="() => EditTemplate(template)">Edit</button>
                <button @onclick="() => DeleteTemplate(template.CodeID)">Delete</button>
            </DisplayTemplate>
        </DxDataGridColumn>
    </DxDataGrid>




}

@code {
    private string searchTerm = string.Empty;
    private List<NewReasonCodeTemplate> templates = new List<NewReasonCodeTemplate>();
    private List<NewReasonCodeTemplate>? filteredTemplates;


    // private List<NewReasonCodeTemplate>? templates;

    private NewReasonCodeTemplate newMemo = new NewReasonCodeTemplate();

    private string? Record;

    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrWhiteSpace(Record))
        {
            await MemoService.AddTemplateAsync(newMemo);
        }
        else
        {
            await MemoService.UpdateTemplateAsync(newMemo);
        }

        // Re-fetch the templates and update the UI.
        templates = await MemoService.GetAllTemplatesAsync();
        StateHasChanged();

        // Reset the form.
        newMemo = new NewReasonCodeTemplate();
        Record = null;
    }


    protected override async Task OnInitializedAsync()
    {
        if (newMemo.EffectiveDate == DateTime.MinValue)
        {
            newMemo.EffectiveDate = DateTime.Today;
        }

        if (newMemo.ExpirationDate == DateTime.MinValue)
        {
            newMemo.ExpirationDate = DateTime.Today.AddYears(2);
        }
        templates = await MemoService.GetAllTemplatesAsync();
    }

    private async Task Search()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            templates = await MemoService.GetAllTemplatesAsync();
            StateHasChanged();
        }
        else
        {
            templates = await MemoService.GetAllTemplatesAsync();
            templates = templates.Where(t => t.CodeID.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||  t.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || t.Summary.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
            StateHasChanged();
        }

    }

    private void ClearData()
	{
		newMemo = new NewReasonCodeTemplate();
		Record = null;
	}

    private async Task EditTemplate(NewReasonCodeTemplate template)
    {
        Record = template.CodeID;
        newMemo = template;
        await JSRuntime.InvokeVoidAsync("scrollToTop");
        // Implement edit logic...
    }

    private async Task DeleteTemplate(string codeId)
    {
        // Implement delete logic...
        //Verify that the user wants to delete the record
        var confirmResult = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {codeId}?");
        if(confirmResult)
		{
            await MemoService.DeleteTemplateAsync(codeId);
            templates = await MemoService.GetAllTemplatesAsync();
            StateHasChanged();

		}
    }
}
